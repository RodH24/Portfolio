{"ast":null,"code":"import { GET_COUNTRIES, GET_BY_NAME, GET_PAGES, GET_DETAIL, SET_CONTINENT, SET_ACTIVITY, GET_SORT, GET_ACTIVITIES } from \"./actions\";\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: [],\n  isFilterByName: false,\n  isFilterByContinent: false,\n  isFilterByActivity: false\n};\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(state.currentPage, state.sizePage, allCountries);\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        numberOfPage: Math.ceil(allCountries.length / state.sizePage)\n      };\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(action.payload.currentPage, action.payload.sizePage, state.countries);\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage)\n      };\n    case GET_BY_NAME:\n      return {\n        ...state,\n        isFilterByName: true,\n        countries: action.payload\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload\n      };\n    case SET_CONTINENT:\n      let isFilterByContinent = false;\n      const resContinent = state.isFilterByName || state.isFilterByActivity ? state.countries : state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.allCountries;\n      } else {\n        isFilterByContinent = true;\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload) countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        isFilterByContinent,\n        countries: countriesContinent\n      };\n    case SET_ACTIVITY:\n      let isFilterByActivity = false;\n      const resActivity = state.isFilterByName || state.isFilterByContinent ? state.countries : state.allCountries;\n      let countriesActivity = [];\n      if (action.payload === \"\") {\n        countriesActivity = state.allCountries;\n      } else {\n        isFilterByActivity = true;\n        for (let i = 0; i < resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter(e => {\n            return e.id == action.payload;\n          });\n          if (selectActivities.length) {\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return {\n        ...state,\n        isFilterByActivity: isFilterByActivity,\n        countries: countriesActivity\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload\n      };\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName ? countries.sort((a, b) => {\n        if (isAsc) {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        } else {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        }\n      }) : countries.sort((a, b) => {\n        const splitA = a.population;\n        const splitB = b.population;\n        if (isAsc) {\n          if (splitA < splitB) return -1;\n          if (splitA > splitB) return 1;\n          return 0;\n        } else {\n          if (splitA > splitB) return -1;\n          if (splitA < splitB) return 1;\n          return 0;\n        }\n      });\n      const pagSortCountries = paginate(state.currentPage, state.sizePage, sort);\n      return {\n        ...state,\n        countries: sort,\n        paginated: pagSortCountries,\n        numberOfPage: Math.ceil(sort.length / 10)\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_BY_NAME","GET_PAGES","GET_DETAIL","SET_CONTINENT","SET_ACTIVITY","GET_SORT","GET_ACTIVITIES","initialState","countries","allContinents","population","allActivities","activity","details","filter","fromApi","paginated","sizePage","currentPage","numberOfPage","allCountries","isFilterByName","isFilterByContinent","isFilterByActivity","paginate","list","inicio","fin","slice","rootReducer","state","arguments","length","undefined","action","type","payload","pagAllCountries","ppopulation","searchName","Math","ceil","allCountriesF","pagPages","resContinent","countriesContinent","i","continent","push","resActivity","countriesActivity","selectActivities","Activities","e","id","isAsc","isByName","sort","a","b","name","splitA","splitB","pagSortCountries"],"sources":["/home/erebo/Documents/Countries/client/src/redux/reducer.js"],"sourcesContent":["import {\n  GET_COUNTRIES,\n  GET_BY_NAME,\n  GET_PAGES,\n  GET_DETAIL,\n  SET_CONTINENT,\n  SET_ACTIVITY,\n  GET_SORT,\n  GET_ACTIVITIES,\n} from \"./actions\";\n\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: [],\n  isFilterByName: false,\n  isFilterByContinent: false,\n  isFilterByActivity: false,\n};\n\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(\n        state.currentPage,\n        state.sizePage,\n        allCountries\n      );\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        numberOfPage: Math.ceil(allCountries.length / state.sizePage),\n      };\n\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(\n        action.payload.currentPage,\n        action.payload.sizePage,\n        state.countries\n      );\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage),\n      };\n\n    case GET_BY_NAME:\n      return {\n        ...state,\n        isFilterByName: true,\n        countries: action.payload,\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload,\n      };\n    case SET_CONTINENT:\n      let isFilterByContinent = false;\n      const resContinent =\n        state.isFilterByName || state.isFilterByActivity\n          ? state.countries\n          : state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.allCountries;\n      } else {\n        isFilterByContinent = true;\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload)\n            countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        isFilterByContinent,\n        countries: countriesContinent,\n      };\n    case SET_ACTIVITY:\n      let isFilterByActivity = false;\n      const resActivity =\n        state.isFilterByName || state.isFilterByContinent\n          ? state.countries\n          : state.allCountries;\n      let countriesActivity = [];\n      if (action.payload === \"\") {\n        countriesActivity = state.allCountries;\n      } else {\n        isFilterByActivity = true;\n        for (let i = 0; i < resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter((e) => {\n            return e.id == action.payload;\n          });\n          if (selectActivities.length) {\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return {\n        ...state,\n        isFilterByActivity: isFilterByActivity,\n        countries: countriesActivity,\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload,\n      };\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName\n        ? countries.sort((a, b) => {\n            if (isAsc) {\n              if (a.name < b.name) return -1;\n              if (a.name > b.name) return 1;\n              return 0;\n            } else {\n              if (a.name > b.name) return -1;\n              if (a.name < b.name) return 1;\n              return 0;\n            }\n          })\n        : countries.sort((a, b) => {\n            const splitA = a.population;\n            const splitB = b.population;\n            if (isAsc) {\n              if (splitA < splitB) return -1;\n              if (splitA > splitB) return 1;\n              return 0;\n            } else {\n              if (splitA > splitB) return -1;\n              if (splitA < splitB) return 1;\n              return 0;\n            }\n          });\n      const pagSortCountries = paginate(\n        state.currentPage,\n        state.sizePage,\n        sort\n      );\n      return {\n        ...state,\n        countries: sort,\n        paginated: pagSortCountries,\n        numberOfPage: Math.ceil(sort.length / 10),\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}