{"ast":null,"code":"import { GET_COUNTRIES, GET_BY_NAME, GET_PAGES, GET_DETAIL, SET_CONTINENT, SET_ACTIVITY, GET_SORT, GET_ACTIVITIES } from \"./actions\";\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: [],\n  isFilterByName: false,\n  isFilterByContinent: false,\n  isFilterByActivity: false,\n  filtered: []\n};\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(state.currentPage, state.sizePage, allCountries);\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        filtered: action.payload,\n        numberOfPage: Math.ceil(allCountries.length / state.sizePage)\n      };\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(action.payload.currentPage, action.payload.sizePage, state.countries);\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage)\n      };\n    case GET_BY_NAME:\n      let all = state.filtered;\n      let filter = all;\n      console.log(\"RRRRRRRRR\", action.payload);\n      if (action.payload.length < 250) {\n        filter = all.filter(value => action.payload.includes(value));\n      }\n      return {\n        ...state,\n        isFilterByName: true,\n        countries: filter\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload\n      };\n    case SET_CONTINENT:\n      let isFilterByContinent = false;\n      const resContinent = state.isFilterByActivity ? state.filtered : state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.isFilterByActivity ? state.filtered : state.allCountries;\n      } else {\n        isFilterByContinent = true;\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload) countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        isFilterByContinent,\n        countries: countriesContinent,\n        filtered: state.isFilterByActivity ? state.filtered : countriesContinent\n      };\n    case SET_ACTIVITY:\n      let isFilterByActivity = false;\n      const resActivity = state.isFilterByContinent ? state.filtered : state.allCountries;\n      let countriesActivity = [];\n      console.log(resActivity);\n      if (action.payload === \"\") {\n        countriesActivity = state.isFilterByContinent ? state.filtered : state.allCountries;\n      } else {\n        isFilterByActivity = true;\n        for (let i = 0; i < resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter(e => {\n            return e.id == action.payload;\n          });\n          if (selectActivities.length) {\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return {\n        ...state,\n        isFilterByActivity: isFilterByActivity,\n        countries: countriesActivity,\n        filtered: state.isFilterByContinent ? state.filtered : countriesActivity\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload\n      };\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName ? countries.sort((a, b) => {\n        if (isAsc) {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        } else {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        }\n      }) : countries.sort((a, b) => {\n        const splitA = a.population;\n        const splitB = b.population;\n        if (isAsc) {\n          if (splitA < splitB) return -1;\n          if (splitA > splitB) return 1;\n          return 0;\n        } else {\n          if (splitA > splitB) return -1;\n          if (splitA < splitB) return 1;\n          return 0;\n        }\n      });\n      const pagSortCountries = paginate(state.currentPage, state.sizePage, sort);\n      return {\n        ...state,\n        countries: sort,\n        paginated: pagSortCountries,\n        numberOfPage: Math.ceil(sort.length / 10)\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_BY_NAME","GET_PAGES","GET_DETAIL","SET_CONTINENT","SET_ACTIVITY","GET_SORT","GET_ACTIVITIES","initialState","countries","allContinents","population","allActivities","activity","details","filter","fromApi","paginated","sizePage","currentPage","numberOfPage","allCountries","isFilterByName","isFilterByContinent","isFilterByActivity","filtered","paginate","list","inicio","fin","slice","rootReducer","state","arguments","length","undefined","action","type","payload","pagAllCountries","ppopulation","searchName","Math","ceil","allCountriesF","pagPages","all","console","log","value","includes","resContinent","countriesContinent","i","continent","push","resActivity","countriesActivity","selectActivities","Activities","e","id","isAsc","isByName","sort","a","b","name","splitA","splitB","pagSortCountries"],"sources":["/home/erebo/Documents/Countries/client/src/redux/reducer.js"],"sourcesContent":["import {\n  GET_COUNTRIES,\n  GET_BY_NAME,\n  GET_PAGES,\n  GET_DETAIL,\n  SET_CONTINENT,\n  SET_ACTIVITY,\n  GET_SORT,\n  GET_ACTIVITIES,\n} from \"./actions\";\n\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: [],\n  isFilterByName: false,\n  isFilterByContinent: false,\n  isFilterByActivity: false,\n  filtered: [],\n};\n\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(\n        state.currentPage,\n        state.sizePage,\n        allCountries\n      );\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        filtered: action.payload,\n        numberOfPage: Math.ceil(allCountries.length / state.sizePage),\n      };\n\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(\n        action.payload.currentPage,\n        action.payload.sizePage,\n        state.countries\n      );\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage),\n      };\n\n    case GET_BY_NAME:\n      let all = state.filtered;\n      let filter = all;\n      console.log(\"RRRRRRRRR\", action.payload);\n      if(action.payload.length < 250){\n        filter = all.filter((value) => action.payload.includes(value));\n      }\n      return {\n        ...state,\n        isFilterByName: true,\n        countries: filter,\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload,\n      };\n    case SET_CONTINENT:\n      let isFilterByContinent = false;\n      const resContinent = state.isFilterByActivity\n        ? state.filtered\n        : state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.isFilterByActivity\n          ? state.filtered\n          : state.allCountries;\n      } else {\n        isFilterByContinent = true;\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload)\n            countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        isFilterByContinent,\n        countries: countriesContinent,\n        filtered: state.isFilterByActivity\n          ? state.filtered\n          : countriesContinent,\n      };\n    case SET_ACTIVITY:\n      let isFilterByActivity = false;\n      const resActivity = state.isFilterByContinent\n        ? state.filtered\n        : state.allCountries;\n      let countriesActivity = [];\n      console.log(resActivity);\n      if (action.payload === \"\") {\n        countriesActivity = state.isFilterByContinent\n          ? state.filtered\n          : state.allCountries;\n      } else {\n        isFilterByActivity = true;\n        for (let i = 0; i < resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter((e) => {\n            return e.id == action.payload;\n          });\n          if (selectActivities.length) {\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return {\n        ...state,\n        isFilterByActivity: isFilterByActivity,\n        countries: countriesActivity,\n        filtered: state.isFilterByContinent\n          ? state.filtered\n          : countriesActivity,\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload,\n      };\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName\n        ? countries.sort((a, b) => {\n            if (isAsc) {\n              if (a.name < b.name) return -1;\n              if (a.name > b.name) return 1;\n              return 0;\n            } else {\n              if (a.name > b.name) return -1;\n              if (a.name < b.name) return 1;\n              return 0;\n            }\n          })\n        : countries.sort((a, b) => {\n            const splitA = a.population;\n            const splitB = b.population;\n            if (isAsc) {\n              if (splitA < splitB) return -1;\n              if (splitA > splitB) return 1;\n              return 0;\n            } else {\n              if (splitA > splitB) return -1;\n              if (splitA < splitB) return 1;\n              return 0;\n            }\n          });\n      const pagSortCountries = paginate(\n        state.currentPage,\n        state.sizePage,\n        sort\n      );\n      return {\n        ...state,\n        countries: sort,\n        paginated: pagSortCountries,\n        numberOfPage: Math.ceil(sort.length / 10),\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}