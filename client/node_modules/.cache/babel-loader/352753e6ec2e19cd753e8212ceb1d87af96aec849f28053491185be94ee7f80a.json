{"ast":null,"code":"import { GET_COUNTRIES, GET_BY_NAME, GET_PAGES, GET_DETAIL, SET_CONTINENT, SET_ACTIVITY, GET_SORT, GET_ACTIVITIES } from \"./actions\";\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: []\n};\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(state.currentPage, state.sizePage, allCountries);\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        numberOfPage: Math.ceil(allCountries.length / state.sizePage)\n      };\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(action.payload.currentPage, action.payload.sizePage, state.countries);\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage)\n      };\n    case GET_BY_NAME:\n      return {\n        ...state,\n        countries: action.payload\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload\n      };\n    case SET_CONTINENT:\n      const resContinent = state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.allCountries;\n      } else {\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload) countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        countries: countriesContinent\n      };\n    case SET_ACTIVITY:\n      const resActivity = state.allCountries;\n      let countriesActivity = [];\n      if (action.payload === \"\") {\n        countriesActivity = state.allCountries;\n      } else {\n        console.log(action.payload);\n        for (let i = 0; i < resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter(e => {\n            if (resActivity[i].name == \"Brazil\") console.log(e.id, e.id === action.payload);\n            return e.id === action.payload;\n          });\n          // console.log(\"RRRRRRRRRR\", selectActivities);\n          if (selectActivities.length) {\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return {\n        ...state,\n        countries: countriesActivity\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload\n      };\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName ? countries.sort((a, b) => {\n        if (isAsc) {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        } else {\n          if (a.name > b.name) return -1;\n          if (a.name < b.name) return 1;\n          return 0;\n        }\n      }) : countries.sort((a, b) => {\n        const splitA = a.population;\n        const splitB = b.population;\n        if (isAsc) {\n          if (splitA < splitB) return -1;\n          if (splitA > splitB) return 1;\n          return 0;\n        } else {\n          if (splitA > splitB) return -1;\n          if (splitA < splitB) return 1;\n          return 0;\n        }\n      });\n      const pagSortCountries = paginate(state.currentPage, state.sizePage, sort);\n      return {\n        ...state,\n        countries: sort,\n        paginated: pagSortCountries,\n        numberOfPage: Math.ceil(sort.length / 10)\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_COUNTRIES","GET_BY_NAME","GET_PAGES","GET_DETAIL","SET_CONTINENT","SET_ACTIVITY","GET_SORT","GET_ACTIVITIES","initialState","countries","allContinents","population","allActivities","activity","details","filter","fromApi","paginated","sizePage","currentPage","numberOfPage","allCountries","paginate","list","inicio","fin","slice","rootReducer","state","arguments","length","undefined","action","type","payload","pagAllCountries","ppopulation","searchName","Math","ceil","allCountriesF","pagPages","resContinent","countriesContinent","i","continent","push","resActivity","countriesActivity","console","log","selectActivities","Activities","e","name","id","isAsc","isByName","sort","a","b","splitA","splitB","pagSortCountries"],"sources":["/home/erebo/Documents/Countries/client/src/redux/reducer.js"],"sourcesContent":["import {\n  GET_COUNTRIES,\n  GET_BY_NAME,\n  GET_PAGES,\n  GET_DETAIL,\n  SET_CONTINENT,\n  SET_ACTIVITY,\n  GET_SORT,\n  GET_ACTIVITIES,\n} from \"./actions\";\n\nconst initialState = {\n  countries: [],\n  allContinents: [],\n  population: [],\n  allActivities: [],\n  activity: [],\n  details: [],\n  filter: [],\n  fromApi: true,\n  paginated: [],\n  sizePage: 10,\n  currentPage: 0,\n  numberOfPage: 0,\n  allCountries: [],\n};\n\nfunction paginate(currentPage, sizePage, list) {\n  const inicio = sizePage * currentPage;\n  const fin = inicio + sizePage;\n  const paginated = list.slice(inicio, fin);\n  return paginated;\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case GET_COUNTRIES:\n      const allCountries = action.payload;\n      const pagAllCountries = paginate(\n        state.currentPage,\n        state.sizePage,\n        allCountries\n      );\n      return {\n        ...state,\n        countries: action.payload,\n        allContinents: action.payload,\n        ppopulation: action.payload,\n        allActivities: action.payload,\n        paginated: pagAllCountries,\n        searchName: action.payload,\n        allCountries: action.payload,\n        numberOfPage: Math.ceil(allCountries.length/state.sizePage)\n      };\n\n    case GET_PAGES:\n      const sizePage = action.payload.sizePage;\n      const currentPage = action.payload.currentPage;\n      const allCountriesF = state.countries;\n      const pagPages = paginate(\n        action.payload.currentPage,\n        action.payload.sizePage,\n        state.countries\n      );\n      return {\n        ...state,\n        paginated: pagPages,\n        sizePage,\n        currentPage,\n        numberOfPage: Math.ceil(allCountriesF.length / state.sizePage),\n      };\n\n    case GET_BY_NAME:\n      return {\n        ...state,\n        countries: action.payload,\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload,\n      };\n    case SET_CONTINENT:\n      const resContinent = state.allCountries;\n      let countriesContinent = [];\n      if (action.payload === \"\") {\n        countriesContinent = state.allCountries;\n      } else {\n        for (let i = 0; i < resContinent.length; i++) {\n          if (resContinent[i].continent === action.payload)\n            countriesContinent.push(resContinent[i]);\n        }\n      }\n      return {\n        ...state,\n        countries: countriesContinent,\n      };\n    case SET_ACTIVITY:\n      const resActivity = state.allCountries;\n      let countriesActivity = [];\n      if (action.payload === \"\"){\n        countriesActivity = state.allCountries;\n      } else { \n        console.log(action.payload);\n        for (let i = 0; i<resActivity.length; i++) {\n          let selectActivities = resActivity[i].Activities.filter((e) =>{ \n            if(resActivity[i].name == \"Brazil\")\n            console.log(e.id, e.id === action.payload);\n            return e.id === action.payload})\n          // console.log(\"RRRRRRRRRR\", selectActivities);\n          if(selectActivities.length){\n            countriesActivity.push(resActivity[i]);\n          }\n        }\n      }\n      return{\n        ...state,\n        countries: countriesActivity,\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        allActivities: action.payload\n      }\n    case GET_SORT:\n      const countries = state.countries;\n      const isAsc = action.payload.isAsc;\n      const isByName = action.payload.isByName;\n      const sort = isByName\n        ? countries.sort((a, b) => {\n            if (isAsc) {\n              if (a.name < b.name) return -1;\n              if (a.name > b.name) return 1;\n              return 0;\n            } else {\n              if (a.name > b.name) return -1;\n              if (a.name < b.name) return 1;\n              return 0;\n            }\n          })\n        : countries.sort((a, b) => {\n            const splitA = a.population;\n            const splitB = b.population;\n            if(isAsc){\n                if(splitA < splitB) return -1;\n                if(splitA > splitB) return 1;\n                return 0;\n            } else{\n                if(splitA > splitB) return -1;\n                if(splitA < splitB) return 1; \n                return 0;\n            }\n          });\n        const pagSortCountries = paginate(state.currentPage, state.sizePage, sort);\n        return{\n            ...state,\n            countries: sort,\n            paginated: pagSortCountries,\n            numberOfPage:Math.ceil(sort.length / 10),\n        };\n    default:\n      return { ...state };\n  }\n};\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}